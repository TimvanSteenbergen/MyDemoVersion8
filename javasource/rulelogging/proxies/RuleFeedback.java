// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package rulelogging.proxies;

public class RuleFeedback
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject ruleFeedbackMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "RuleLogging.RuleFeedback";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Feedback("Feedback"),
		RuleFeedback_Rule("RuleLogging.RuleFeedback_Rule");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public RuleFeedback(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "RuleLogging.RuleFeedback"));
	}

	protected RuleFeedback(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject ruleFeedbackMendixObject)
	{
		if (ruleFeedbackMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("RuleLogging.RuleFeedback", ruleFeedbackMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a RuleLogging.RuleFeedback");

		this.ruleFeedbackMendixObject = ruleFeedbackMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'RuleFeedback.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static rulelogging.proxies.RuleFeedback initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return rulelogging.proxies.RuleFeedback.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static rulelogging.proxies.RuleFeedback initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new rulelogging.proxies.RuleFeedback(context, mendixObject);
	}

	public static rulelogging.proxies.RuleFeedback load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return rulelogging.proxies.RuleFeedback.initialize(context, mendixObject);
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Feedback
	 */
	public final java.lang.String getFeedback()
	{
		return getFeedback(getContext());
	}

	/**
	 * @param context
	 * @return value of Feedback
	 */
	public final java.lang.String getFeedback(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Feedback.toString());
	}

	/**
	 * Set value of Feedback
	 * @param feedback
	 */
	public final void setFeedback(java.lang.String feedback)
	{
		setFeedback(getContext(), feedback);
	}

	/**
	 * Set value of Feedback
	 * @param context
	 * @param feedback
	 */
	public final void setFeedback(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String feedback)
	{
		getMendixObject().setValue(context, MemberNames.Feedback.toString(), feedback);
	}

	/**
	 * @return value of RuleFeedback_Rule
	 */
	public final rulelogging.proxies.Rule getRuleFeedback_Rule() throws com.mendix.core.CoreException
	{
		return getRuleFeedback_Rule(getContext());
	}

	/**
	 * @param context
	 * @return value of RuleFeedback_Rule
	 */
	public final rulelogging.proxies.Rule getRuleFeedback_Rule(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		rulelogging.proxies.Rule result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.RuleFeedback_Rule.toString());
		if (identifier != null)
			result = rulelogging.proxies.Rule.load(context, identifier);
		return result;
	}

	/**
	 * Set value of RuleFeedback_Rule
	 * @param rulefeedback_rule
	 */
	public final void setRuleFeedback_Rule(rulelogging.proxies.Rule rulefeedback_rule)
	{
		setRuleFeedback_Rule(getContext(), rulefeedback_rule);
	}

	/**
	 * Set value of RuleFeedback_Rule
	 * @param context
	 * @param rulefeedback_rule
	 */
	public final void setRuleFeedback_Rule(com.mendix.systemwideinterfaces.core.IContext context, rulelogging.proxies.Rule rulefeedback_rule)
	{
		if (rulefeedback_rule == null)
			getMendixObject().setValue(context, MemberNames.RuleFeedback_Rule.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.RuleFeedback_Rule.toString(), rulefeedback_rule.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return ruleFeedbackMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final rulelogging.proxies.RuleFeedback that = (rulelogging.proxies.RuleFeedback) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "RuleLogging.RuleFeedback";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
