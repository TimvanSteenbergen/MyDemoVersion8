// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package rulelogging.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the RuleLogging module
	public static void microflow(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("RuleLogging.Microflow").withParams(params).execute(context);
	}
	public static rulelogging.proxies.Rule sUB_Rule_GetCreate(IContext context, java.lang.String _ruleName)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("RuleName", _ruleName);
		IMendixObject result = (IMendixObject)Core.microflowCall("RuleLogging.SUB_Rule_GetCreate").withParams(params).execute(context);
		return result == null ? null : rulelogging.proxies.Rule.initialize(context, result);
	}
	public static java.util.List<rulelogging.proxies.RuleFeedback> sUB_Rule_GetFeedback(IContext context, java.lang.String _rule)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Rule", _rule);
		java.util.List<IMendixObject> objs = Core.microflowCall("RuleLogging.SUB_Rule_GetFeedback").withParams(params).execute(context);
		java.util.List<rulelogging.proxies.RuleFeedback> result = null;
		if (objs != null)
		{
			result = new java.util.ArrayList<>();
			for (IMendixObject obj : objs)
				result.add(rulelogging.proxies.RuleFeedback.initialize(context, obj));
		}
		return result;
	}
	public static void sUB_RuleFeedback_Add(IContext context, rulelogging.proxies.Rule _rule, java.lang.String _feedbackString)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Rule", _rule == null ? null : _rule.getMendixObject());
		params.put("FeedbackString", _feedbackString);
		Core.microflowCall("RuleLogging.SUB_RuleFeedback_Add").withParams(params).execute(context);
	}
	public static java.util.List<rulelogging.proxies.RuleFeedback> sUB_Validation(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.List<IMendixObject> objs = Core.microflowCall("RuleLogging.SUB_Validation").withParams(params).execute(context);
		java.util.List<rulelogging.proxies.RuleFeedback> result = null;
		if (objs != null)
		{
			result = new java.util.ArrayList<>();
			for (IMendixObject obj : objs)
				result.add(rulelogging.proxies.RuleFeedback.initialize(context, obj));
		}
		return result;
	}
}