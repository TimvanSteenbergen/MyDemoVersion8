// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package barcode.actions;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.math.BigDecimal;
import javax.imageio.ImageIO;
import org.krysalis.barcode4j.HumanReadablePlacement;
import org.krysalis.barcode4j.impl.codabar.CodabarBean;
import org.krysalis.barcode4j.impl.code128.Code128Bean;
import org.krysalis.barcode4j.impl.code128.EAN128Bean;
import org.krysalis.barcode4j.impl.code39.Code39Bean;
import org.krysalis.barcode4j.impl.int2of5.Interleaved2Of5Bean;
import org.krysalis.barcode4j.impl.postnet.POSTNETBean;
import org.krysalis.barcode4j.impl.upcean.EAN13Bean;
import org.krysalis.barcode4j.impl.upcean.EAN8Bean;
import org.krysalis.barcode4j.impl.upcean.UPCABean;
import org.krysalis.barcode4j.impl.upcean.UPCEBean;
import org.krysalis.barcode4j.output.bitmap.BitmapCanvasProvider;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * generates the barcode based on the ean and barcode type
 */
public class JA_Barcode_Generate extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __BarcodeParameter1;
	private barcode.proxies.Barcode BarcodeParameter1;

	public JA_Barcode_Generate(IContext context, IMendixObject BarcodeParameter1)
	{
		super(context);
		this.__BarcodeParameter1 = BarcodeParameter1;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.BarcodeParameter1 = __BarcodeParameter1 == null ? null : barcode.proxies.Barcode.initialize(getContext(), __BarcodeParameter1);

		// BEGIN USER CODE
		boolean generated = false;
		if (this.BarcodeParameter1 == null)
			throw new IllegalArgumentException("no barcode object passed");
		String EAN = this.BarcodeParameter1.getEAN();
		if(EAN != null && !EAN.isEmpty()) {
			Core.getLogger(barcode.proxies.constants.Constants.getLogNode()).debug("EAN : " + EAN);
			final int dpi = 400;
			boolean antiAlias = false;
			int orientation = 0;
			if (!this.BarcodeParameter1.getorientation().toString().isEmpty()) {
				if (this.BarcodeParameter1.getorientation()>=0 && this.BarcodeParameter1.getorientation()<=360) {
					orientation = this.BarcodeParameter1.getorientation();
				}
			}
			BigDecimal h = new BigDecimal(1.0);
			if (!this.BarcodeParameter1.getheightMultiplier().toString().isEmpty()) {
				h = this.BarcodeParameter1.getheightMultiplier();
			}
			//Set up the canvas provider to create a monochrome bitmap
			
	        BitmapCanvasProvider canvas = new BitmapCanvasProvider(dpi, BufferedImage.TYPE_BYTE_BINARY, antiAlias, orientation);
	        switch (this.BarcodeParameter1.getBarcodeType()) {
			case Codabar:
				CodabarBean beanCodaBar = new CodabarBean();
				if (!this.BarcodeParameter1.getshowBarcodeText()) {beanCodaBar.setMsgPosition(HumanReadablePlacement.HRP_NONE);}
				//Generate the barcode
				beanCodaBar.setBarHeight(beanCodaBar.getBarHeight()*h.doubleValue());
		        beanCodaBar.generateBarcode(canvas, EAN);
				break;
			case Code_128:
				Code128Bean bean128 = new Code128Bean();
				if (!this.BarcodeParameter1.getshowBarcodeText()) {bean128.setMsgPosition(HumanReadablePlacement.HRP_NONE);}
				//Generate the barcode
				bean128.setBarHeight(bean128.getBarHeight()*h.doubleValue());
		        bean128.generateBarcode(canvas, EAN);
				break;
			case Code_39:
				Code39Bean bean39 = new Code39Bean();
				if (!this.BarcodeParameter1.getshowBarcodeText()) {bean39.setMsgPosition(HumanReadablePlacement.HRP_NONE);}
				//Generate the barcode
				bean39.setBarHeight(bean39.getBarHeight()*h.doubleValue());
		        bean39.generateBarcode(canvas, EAN);
				break;
			case Interleaved_2_of_5:
				Interleaved2Of5Bean beanInterleaved = new Interleaved2Of5Bean();
				if (!this.BarcodeParameter1.getshowBarcodeText()) {beanInterleaved.setMsgPosition(HumanReadablePlacement.HRP_NONE);}
				//generate the barcode
				beanInterleaved.setBarHeight(beanInterleaved.getBarHeight()*h.doubleValue());
				beanInterleaved.generateBarcode(canvas, EAN);
				break;
			case Postnet:
				POSTNETBean beanPostnet = new POSTNETBean();
				if (!this.BarcodeParameter1.getshowBarcodeText()) {beanPostnet.setMsgPosition(HumanReadablePlacement.HRP_NONE);}
				//generate the barcode
				beanPostnet.setBarHeight(beanPostnet.getBarHeight()*h.doubleValue());
				beanPostnet.generateBarcode(canvas, EAN);
				break;
			case EAN13:
				EAN13Bean beanEAN13 = new EAN13Bean();
				if (!this.BarcodeParameter1.getshowBarcodeText()) {beanEAN13.setMsgPosition(HumanReadablePlacement.HRP_NONE);}
				//generate the barcode
				beanEAN13.setBarHeight(beanEAN13.getBarHeight()*h.doubleValue());
				beanEAN13.generateBarcode(canvas, EAN);
				break;
			case EAN8:
				EAN8Bean beanEAN8 = new EAN8Bean();
				if (!this.BarcodeParameter1.getshowBarcodeText()) {beanEAN8.setMsgPosition(HumanReadablePlacement.HRP_NONE);}
				//generate the barcode
				beanEAN8.setBarHeight(beanEAN8.getBarHeight()*h.doubleValue());
				beanEAN8.generateBarcode(canvas, EAN);
				break;
			case UPCA:
				UPCABean beanUPCA = new UPCABean();
				if (!this.BarcodeParameter1.getshowBarcodeText()) {beanUPCA.setMsgPosition(HumanReadablePlacement.HRP_NONE);}
				//generate the barcode
				beanUPCA.setBarHeight(beanUPCA.getBarHeight()*h.doubleValue());
				beanUPCA.generateBarcode(canvas, EAN);
				break;
			case UPCE:
				UPCEBean beanUPCE = new UPCEBean();
				if (!this.BarcodeParameter1.getshowBarcodeText()) {beanUPCE.setMsgPosition(HumanReadablePlacement.HRP_NONE);}
				//generate the barcode
				beanUPCE.setBarHeight(beanUPCE.getBarHeight()*h.doubleValue());
				beanUPCE.generateBarcode(canvas, EAN);
				break;
			case EAN128:
				EAN128Bean beanEAN128 = new EAN128Bean();
				if (!this.BarcodeParameter1.getshowBarcodeText()) {beanEAN128.setMsgPosition(HumanReadablePlacement.HRP_NONE);}
				//generate the barcode
				beanEAN128.setBarHeight(beanEAN128.getBarHeight()*h.doubleValue());
				beanEAN128.generateBarcode(canvas, EAN);
				break;
			default:
				Core.getLogger(barcode.proxies.constants.Constants.getLogNode()).debug("Barcode type not implemented");
				break;
			}
	        //Signal end of generation
	        canvas.finish();
	 
	        //Get generated bitmap
	        BufferedImage symbol = canvas.getBufferedImage();
	 
	        // copy bitmap to mendix
	        ByteArrayOutputStream os = new ByteArrayOutputStream();
	        try {
	            ImageIO.write(symbol, "png", os);
	            ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());
	            try {
	            	this.BarcodeParameter1.setName("barcode.png");
	            	Core.storeImageDocumentContent(getContext(), BarcodeParameter1.getMendixObject(), is, symbol.getWidth(), symbol.getHeight());
	            }finally{
	            	is.close();
	            }
	        }finally{
	             os.flush();
	             os.close();
	        }      
	        generated = true;
		} else {
			Core.getLogger(barcode.proxies.constants.Constants.getLogNode()).debug("no EAN specified in barcode object");
		}
		return generated;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_Barcode_Generate";
	}

	// BEGIN EXTRA CODE
	
	// END EXTRA CODE
}
