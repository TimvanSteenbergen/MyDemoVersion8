// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package functionfiddler.proxies;

public class IsMatchResult
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject isMatchResultMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "FunctionFiddler.IsMatchResult";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		param1StringToCheck("param1StringToCheck"),
		param2Regex("param2Regex"),
		Result("Result"),
		Error("Error"),
		ErrorMessage("ErrorMessage");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public IsMatchResult(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "FunctionFiddler.IsMatchResult"));
	}

	protected IsMatchResult(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject isMatchResultMendixObject)
	{
		if (isMatchResultMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("FunctionFiddler.IsMatchResult", isMatchResultMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a FunctionFiddler.IsMatchResult");

		this.isMatchResultMendixObject = isMatchResultMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'IsMatchResult.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static functionfiddler.proxies.IsMatchResult initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return functionfiddler.proxies.IsMatchResult.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static functionfiddler.proxies.IsMatchResult initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new functionfiddler.proxies.IsMatchResult(context, mendixObject);
	}

	public static functionfiddler.proxies.IsMatchResult load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return functionfiddler.proxies.IsMatchResult.initialize(context, mendixObject);
	}

	public static java.util.List<functionfiddler.proxies.IsMatchResult> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<functionfiddler.proxies.IsMatchResult> result = new java.util.ArrayList<functionfiddler.proxies.IsMatchResult>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//FunctionFiddler.IsMatchResult" + xpathConstraint))
			result.add(functionfiddler.proxies.IsMatchResult.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of param1StringToCheck
	 */
	public final java.lang.String getparam1StringToCheck()
	{
		return getparam1StringToCheck(getContext());
	}

	/**
	 * @param context
	 * @return value of param1StringToCheck
	 */
	public final java.lang.String getparam1StringToCheck(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.param1StringToCheck.toString());
	}

	/**
	 * Set value of param1StringToCheck
	 * @param param1stringtocheck
	 */
	public final void setparam1StringToCheck(java.lang.String param1stringtocheck)
	{
		setparam1StringToCheck(getContext(), param1stringtocheck);
	}

	/**
	 * Set value of param1StringToCheck
	 * @param context
	 * @param param1stringtocheck
	 */
	public final void setparam1StringToCheck(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String param1stringtocheck)
	{
		getMendixObject().setValue(context, MemberNames.param1StringToCheck.toString(), param1stringtocheck);
	}

	/**
	 * @return value of param2Regex
	 */
	public final java.lang.String getparam2Regex()
	{
		return getparam2Regex(getContext());
	}

	/**
	 * @param context
	 * @return value of param2Regex
	 */
	public final java.lang.String getparam2Regex(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.param2Regex.toString());
	}

	/**
	 * Set value of param2Regex
	 * @param param2regex
	 */
	public final void setparam2Regex(java.lang.String param2regex)
	{
		setparam2Regex(getContext(), param2regex);
	}

	/**
	 * Set value of param2Regex
	 * @param context
	 * @param param2regex
	 */
	public final void setparam2Regex(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String param2regex)
	{
		getMendixObject().setValue(context, MemberNames.param2Regex.toString(), param2regex);
	}

	/**
	 * @return value of Result
	 */
	public final java.lang.Boolean getResult()
	{
		return getResult(getContext());
	}

	/**
	 * @param context
	 * @return value of Result
	 */
	public final java.lang.Boolean getResult(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.Result.toString());
	}

	/**
	 * Set value of Result
	 * @param result
	 */
	public final void setResult(java.lang.Boolean result)
	{
		setResult(getContext(), result);
	}

	/**
	 * Set value of Result
	 * @param context
	 * @param result
	 */
	public final void setResult(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean result)
	{
		getMendixObject().setValue(context, MemberNames.Result.toString(), result);
	}

	/**
	 * @return value of Error
	 */
	public final java.lang.Boolean getError()
	{
		return getError(getContext());
	}

	/**
	 * @param context
	 * @return value of Error
	 */
	public final java.lang.Boolean getError(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.Error.toString());
	}

	/**
	 * Set value of Error
	 * @param error
	 */
	public final void setError(java.lang.Boolean error)
	{
		setError(getContext(), error);
	}

	/**
	 * Set value of Error
	 * @param context
	 * @param error
	 */
	public final void setError(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean error)
	{
		getMendixObject().setValue(context, MemberNames.Error.toString(), error);
	}

	/**
	 * @return value of ErrorMessage
	 */
	public final java.lang.String getErrorMessage()
	{
		return getErrorMessage(getContext());
	}

	/**
	 * @param context
	 * @return value of ErrorMessage
	 */
	public final java.lang.String getErrorMessage(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.ErrorMessage.toString());
	}

	/**
	 * Set value of ErrorMessage
	 * @param errormessage
	 */
	public final void setErrorMessage(java.lang.String errormessage)
	{
		setErrorMessage(getContext(), errormessage);
	}

	/**
	 * Set value of ErrorMessage
	 * @param context
	 * @param errormessage
	 */
	public final void setErrorMessage(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String errormessage)
	{
		getMendixObject().setValue(context, MemberNames.ErrorMessage.toString(), errormessage);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return isMatchResultMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final functionfiddler.proxies.IsMatchResult that = (functionfiddler.proxies.IsMatchResult) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "FunctionFiddler.IsMatchResult";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
