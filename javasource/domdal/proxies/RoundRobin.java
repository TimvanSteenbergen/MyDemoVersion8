// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package domdal.proxies;

public class RoundRobin
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject roundRobinMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "DomDAL.RoundRobin";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		RoundRobin_Person1("DomDAL.RoundRobin_Person1"),
		RoundRobin_Person2("DomDAL.RoundRobin_Person2");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public RoundRobin(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "DomDAL.RoundRobin"));
	}

	protected RoundRobin(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject roundRobinMendixObject)
	{
		if (roundRobinMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("DomDAL.RoundRobin", roundRobinMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a DomDAL.RoundRobin");

		this.roundRobinMendixObject = roundRobinMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'RoundRobin.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static domdal.proxies.RoundRobin initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return domdal.proxies.RoundRobin.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static domdal.proxies.RoundRobin initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new domdal.proxies.RoundRobin(context, mendixObject);
	}

	public static domdal.proxies.RoundRobin load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return domdal.proxies.RoundRobin.initialize(context, mendixObject);
	}

	public static java.util.List<domdal.proxies.RoundRobin> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<domdal.proxies.RoundRobin> result = new java.util.ArrayList<domdal.proxies.RoundRobin>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//DomDAL.RoundRobin" + xpathConstraint))
			result.add(domdal.proxies.RoundRobin.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of RoundRobin_Person1
	 */
	public final domdal.proxies.Person getRoundRobin_Person1() throws com.mendix.core.CoreException
	{
		return getRoundRobin_Person1(getContext());
	}

	/**
	 * @param context
	 * @return value of RoundRobin_Person1
	 */
	public final domdal.proxies.Person getRoundRobin_Person1(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		domdal.proxies.Person result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.RoundRobin_Person1.toString());
		if (identifier != null)
			result = domdal.proxies.Person.load(context, identifier);
		return result;
	}

	/**
	 * Set value of RoundRobin_Person1
	 * @param roundrobin_person1
	 */
	public final void setRoundRobin_Person1(domdal.proxies.Person roundrobin_person1)
	{
		setRoundRobin_Person1(getContext(), roundrobin_person1);
	}

	/**
	 * Set value of RoundRobin_Person1
	 * @param context
	 * @param roundrobin_person1
	 */
	public final void setRoundRobin_Person1(com.mendix.systemwideinterfaces.core.IContext context, domdal.proxies.Person roundrobin_person1)
	{
		if (roundrobin_person1 == null)
			getMendixObject().setValue(context, MemberNames.RoundRobin_Person1.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.RoundRobin_Person1.toString(), roundrobin_person1.getMendixObject().getId());
	}

	/**
	 * @return value of RoundRobin_Person2
	 */
	public final domdal.proxies.Person getRoundRobin_Person2() throws com.mendix.core.CoreException
	{
		return getRoundRobin_Person2(getContext());
	}

	/**
	 * @param context
	 * @return value of RoundRobin_Person2
	 */
	public final domdal.proxies.Person getRoundRobin_Person2(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		domdal.proxies.Person result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.RoundRobin_Person2.toString());
		if (identifier != null)
			result = domdal.proxies.Person.load(context, identifier);
		return result;
	}

	/**
	 * Set value of RoundRobin_Person2
	 * @param roundrobin_person2
	 */
	public final void setRoundRobin_Person2(domdal.proxies.Person roundrobin_person2)
	{
		setRoundRobin_Person2(getContext(), roundrobin_person2);
	}

	/**
	 * Set value of RoundRobin_Person2
	 * @param context
	 * @param roundrobin_person2
	 */
	public final void setRoundRobin_Person2(com.mendix.systemwideinterfaces.core.IContext context, domdal.proxies.Person roundrobin_person2)
	{
		if (roundrobin_person2 == null)
			getMendixObject().setValue(context, MemberNames.RoundRobin_Person2.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.RoundRobin_Person2.toString(), roundrobin_person2.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return roundRobinMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final domdal.proxies.RoundRobin that = (domdal.proxies.RoundRobin) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "DomDAL.RoundRobin";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
