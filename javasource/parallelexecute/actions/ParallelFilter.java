// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package parallelexecute.actions;

import java.util.List;
import java.util.stream.Collectors;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import parallelexecute.actions.ParallelMap.ParallelMicroflowExecutor;

/**
 * Returns a list of object from the input list if the result of executing the microflow is true
 * The called microflow should return Boolean
 */
public class ParallelFilter extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private java.util.List<IMendixObject> List_;
	private java.lang.String Microflow_;

	public ParallelFilter(IContext context, java.util.List<IMendixObject> List_, java.lang.String Microflow_)
	{
		super(context);
		this.List_ = List_;
		this.Microflow_ = Microflow_;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		ParallelMap.validateParameterAndMicroflow(List_, Microflow_, "Boolean", false);
		final ParallelMicroflowExecutor<List<IMendixObject>> executor =
				new ParallelMicroflowExecutor<>(getContext(), Microflow_, null, null);
		return executor.execute(() -> {
			return List_.parallelStream()
			.filter((obj) -> {
				return (Boolean) executor.executeMicroflowInClonedContext(obj);
			})
			.collect(Collectors.toList());
		});
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ParallelFilter";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
