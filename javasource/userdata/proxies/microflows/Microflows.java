// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package userdata.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the UserData module
	public static system.proxies.User dS_User_Get(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("UserData.DS_User_Get").withParams(params).execute(context);
		return result == null ? null : system.proxies.User.initialize(context, result);
	}
	public static java.util.List<system.proxies.UserReportInfo> dS_User_Reports(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.List<IMendixObject> objs = Core.microflowCall("UserData.DS_User_Reports").withParams(params).execute(context);
		java.util.List<system.proxies.UserReportInfo> result = null;
		if (objs != null)
		{
			result = new java.util.ArrayList<>();
			for (IMendixObject obj : objs)
				result.add(system.proxies.UserReportInfo.initialize(context, obj));
		}
		return result;
	}
	public static java.util.List<system.proxies.Session> dS_User_Sessions(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.List<IMendixObject> objs = Core.microflowCall("UserData.DS_User_Sessions").withParams(params).execute(context);
		java.util.List<system.proxies.Session> result = null;
		if (objs != null)
		{
			result = new java.util.ArrayList<>();
			for (IMendixObject obj : objs)
				result.add(system.proxies.Session.initialize(context, obj));
		}
		return result;
	}
	public static java.util.List<system.proxies.TokenInformation> dS_User_Tokens(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.List<IMendixObject> objs = Core.microflowCall("UserData.DS_User_Tokens").withParams(params).execute(context);
		java.util.List<system.proxies.TokenInformation> result = null;
		if (objs != null)
		{
			result = new java.util.ArrayList<>();
			for (IMendixObject obj : objs)
				result.add(system.proxies.TokenInformation.initialize(context, obj));
		}
		return result;
	}
}