// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * @returns {Promise.<boolean>}
 */
export async function Sound_RecordAndPlay() {
	// BEGIN USER CODE
	// copied from https://github.com/bryanjenningz/record-audio
	const recordAudio = () =>
		new Promise(async resolve => {
			const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
			const mediaRecorder = new MediaRecorder(stream);
			const audioChunks = [];

			mediaRecorder.addEventListener("dataavailable", event => {
				audioChunks.push(event.data);
			});

			const start = () => mediaRecorder.start();

			const stop = () =>
				new Promise(resolve => {
					mediaRecorder.addEventListener("stop", () => {
						const audioBlob = new Blob(audioChunks);
						const audioUrl = URL.createObjectURL(audioBlob);
						const audio = new Audio(audioUrl);
						const play = () => audio.play();
						resolve({ audioBlob, audioUrl, play });
					});

					mediaRecorder.stop();
				});

			resolve({ start, stop });
		});

	const sleep = time => new Promise(resolve => setTimeout(resolve, time));

	const handleAction = async () => {
	const recorder = await recordAudio();
	const actionButton = document.querySelector('.RecordAndPlayButton');
	actionButton.disabled = true;
	recorder.start();
	await sleep(2000);
	const audio = await recorder.stop();
	audio.play();
	await sleep(3000);
	actionButton.disabled = false;
	}

	handleAction();

	// END USER CODE
}
